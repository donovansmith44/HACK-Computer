// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

	//Load the instruction into the A register if the instruction is an A-instruction.
	Mux16(a=instruction, b=w5, sel=instruction[15], out=w1);
	ARegister(in=w1, load=aload, out=w2, out[0]=addressM[0],out[1]=addressM[1],out[2]=addressM[2],out[3]=addressM[3],out[4]=addressM[4],out[5]=addressM[5],out[6]=addressM[6],out[7]=addressM[7],out[8]=addressM[8],out[9]=addressM[9],out[10]=addressM[10],out[11]=addressM[11],out[12]=addressM[12],out[13]=addressM[13],out[14]=addressM[14]);
	
	//Load either the memory input or the A register input into the ALU based on the a-bit's value
	Mux16(a=w2, b=inM, sel=instruction[12], out=w3);

	//DRegister takes the ALU output as input
	DRegister(in=w5, load=loadd, out=w4);

	//ALU takes the c bits as single bit instructions
	ALU(x=w4, y=w3, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zro, ng=neg, out=outM, out=w5);

	Not(in=instruction[15], out=ainstr);	

	//WHERE WILL WE STORE VALUES?
	DMux8Way(in=true, sel[0]=instruction[3], sel[1]=instruction[4], sel[2]=instruction[5], b=M, c=D, d= MD, e=A, f=AM, g=AD, h=AMD);

	//LOAD D ONLY IF D BIT CONDITIONS MET AND IT IS C-INSTRUCTION
	Or8Way(in[0]=D, in[1]=AD, in[2]=MD, in[3]=AMD, out=dload);
	And(a=dload, b=instruction[15], out=loadd);
	Or8Way(in[0]=A, in[1]=AD, in[2]=AM, in[3]=AMD, in[4]=ainstr, out=aload);
	Or8Way(in[0]=M, in[1]=AM, in[2]=MD, in[3]=AMD, out=writetom);
	And(a=instruction[15], b=writetom, out=writeM);
	
	DMux8Way(in=true, sel[0]=instruction[0], sel[1]=instruction[1], sel[2]=instruction[2], a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
	
	Not(in=neg, out=pos);
	Not(in=zro, out=notzr);

	And(a=pos, b=notzr, out=t1); //JGT
	And(a=neg, b=notzr, out=t2); //JLT
	
	//less than or equal to if either negative or zero
	Or(a=neg, b=zro, out=t3);

	Or(a=pos, b=zro, out=t4);
	
	//JMP IF WE ARE TO JUMP, AND JUMP CONDITION IS MET
	And(a=t1, b=JGT, out=jmpgt);
	And(a=t2, b=JLT, out=jmplt);
	And(a=zro, b=JEQ, out=jmpeq);
	And(a=t4, b=JGE, out=jmpge);
	And(a=notzr, b=JNE, out=jmpne);
	And(a=t3, b=JLE, out=jmple);
	
	//IF ANY JUMP&JUMPCOND YIELDS TRUE, WE WILL ALWAYS JUMP. THUS WE CAN USE A MULTI WAY OR GATE
	Or8Way(in[0]=jmpgt, in[1]=jmplt, in[2]=jmpeq, in[3]=jmpge, in[4]=jmpne, in[5]=jmple, in[6]= JMP, out=jump);

	Not(in=jumpto, out=notjump);
	Or(a=null, b=notjump, out=inccount);
	
	And(a=jump, b=instruction[15], out=jumpto);

	PC(in=w2, reset=reset, inc=inccount, load=jumpto, out[0]=pc[0], out[1]=pc[1], out[2]=pc[2], out[3]=pc[3], out[4]=pc[4], out[5]=pc[5], out[6]=pc[6], out[7]=pc[7], out[8]=pc[8], out[9]=pc[9], out[10]=pc[10], out[11]=pc[11], out[12]=pc[12], out[13]=pc[13], out[14]=pc[14]);
	
}