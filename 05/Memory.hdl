// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	DMux8Way(in=load, sel[0]=address[12], sel[1]=address[13], sel[2]=address[14], a=l1, b=l2, c=l3, d=l4, e=l5, f=l6, g=l7); //3 MSBs of address code for whether we will address the 16K RAM, the Screen, or the Keyboard
	
	Or8Way(in[0]=l1, in[1]=l2, in[2]=l3, in[3]=l4, out=t1); //0-16384

	RAM16K(in=in, load=t1, address[0]=address[0], address[1]=address[1], address[2]=address[2], address[3]=address[3], address[4]=address[4], address[5]=address[5], address[6]=address[6], address[7]=address[7], address[8]=address[8], address[9]=address[9], address[10]=address[10], address[11]=address[11], address[12]=address[12], address[13]=address[13],out=w1);
	
	Or8Way(in[0]=l5, in[1]=l6, in[2]=l7, out=t2); //16384-24576

	Screen(in=in, load=t2, address[0]=address[0], address[1]=address[1], address[2]=address[2], address[3]=address[3], address[4]=address[4], address[5]=address[5], address[6]=address[6], address[7]=address[7], address[8]=address[8], address[9]=address[9], address[10]=address[10], address[11]=address[11], address[12]=address[12], out=w2);

	Keyboard(out=w3);

	Mux4Way16(a=w1, b=w1, c=w2, d=w3, sel[0]=address[13], sel[1]=address[14], out=out);
	
}